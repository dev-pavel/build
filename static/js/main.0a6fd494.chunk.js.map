{"version":3,"sources":["components/copyright.tsx","store/thunks/auth-thunk.ts","store/selectors/selectors.ts","components/alert.tsx","store/slices/auth-slice.tsx","pages/sign-in/sign-in.tsx","pages/sign-up/sign-up.tsx","store/slices/pick-up-slice.ts","pages/pick-up/steps/from.tsx","pages/pick-up/steps/type.tsx","pages/pick-up/steps/date.tsx","pages/pick-up/steps/from-info.tsx","pages/pick-up/steps/nature.tsx","pages/pick-up/steps/pass.tsx","pages/pick-up/steps/call.tsx","pages/pick-up/steps/to.tsx","components/header.tsx","pages/pick-up/pick-up.tsx","pages/pick-up/check/pick-up-check.tsx","pages/choose/choose.tsx","store/slices/delivery-slice.ts","pages/delivery/steps/to.tsx","pages/delivery/steps/type.tsx","pages/delivery/steps/date.tsx","pages/delivery/steps/from.tsx","pages/delivery/steps/nature.tsx","pages/delivery/steps/pass.tsx","pages/delivery/steps/address.tsx","pages/delivery/steps/call.tsx","pages/delivery/delivery.tsx","pages/delivery/check/delivery-check.tsx","app-router.tsx","store/store.ts","index.tsx"],"names":["Copyright","props","react","Typography","Object","assign","variant","color","align","Link","Date","getFullYear","API_URL","loginThunk","createAsyncThunk","_ref","asyncToGenerator","_regeneratorRuntime","mark","_callee","data","res","wrap","_context","prev","next","axios","post","validateStatus","sent","abrupt","status","stop","_x","apply","this","arguments","registrationThunk","_ref2","_callee2","_context2","_x2","refreshThunk","_ref3","_callee3","_context3","_x3","PickUpSelector","state","pickUp","DeliverySelector","delivery","AuthSelector","auth","CustomAlert","open","setOpen","message","isSuccess","react_default","a","createElement","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","Alert","severity","AuthSlice","createSlice","name","initialState","isAuth","error","isLoading","reducers","setAuth","action","payload","registration","localStorage","setItem","clearError","setLoading","extraReducers","builder","addCase","fulfilled","jwt","actions","SignIn","useSelector","_useState","useState","_useState2","slicedToArray","dispatch","useDispatch","navigate","useNavigate","useEffect","components_alert","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined_default","onSubmit","event","preventDefault","FormData","currentTarget","email","get","password","noValidate","mt","TextField","margin","required","fullWidth","id","label","autoComplete","autoFocus","type","FormControlLabel","control","Checkbox","value","Button","mb","Grid","container","justifyContent","item","onClick","copyright","SignUp","_useState3","_useState4","accept","setAccept","firstName","lastName","company","spacing","xs","sm","checked","onChange","step","from","ready","readyDate","readyTime","pickUpDate","orderNumber","powerOfAttorney","supplierOrderNumber","companyName","fromLastName","fromFirstName","fromPhone","fromExtraPhone","fromAddress","fromExtraAddress","fromCompanyName","fromPickUpTimeMin","fromPickUpTimeMax","fromDocuments","nature","natureDescription","needPass","call","to","toLastName","toFirstName","toPhone","toExtraPhone","toAddress","toExtraAddress","toCompanyName","toPickUpTimeMin","toPickUpTimeMax","toDocuments","PickUpSlice","incrementStep","clearState","decrementStep","setFromData","setTypeData","setDateData","setFromInfoData","setNatureData","setPassData","setCallData","setToInfoData","From","Fragment","gutterBottom","RadioGroup","aria-labelledby","defaultValue","Radio","Type","_useSelector","readyStore","readyDateStore","readyTimeStore","date","setDate","_useState5","_useState6","openPicker","setOpenPicker","_useState7","_useState8","openReadyPicker","setOpenReadyPicker","_useState9","_useState10","setReady","_useState11","_useState12","power","setPower","_useState13","_useState14","setReadyDate","_useState15","_useState16","setReadyTime","LocalizationProvider","dateAdapter","AdapterDayjs","adapterLocale","DatePicker","onOpen","minDate","dayjs","add","e","renderInput","params","focused","onKeyDown","target","TimePicker","newValue","FromInfo","fromPickUpTimeMinStore","fromPickUpTimeMaxStore","_React$useState","React","_React$useState2","setFromPickUpTimeMin","_React$useState3","_React$useState4","setFromPickUpTimeMax","phoneNumber","extraPhoneNumber","address","extraAddress","documents","Nature","description","multiline","maxRows","placeholder","Pass","pass","Call","To","storeTo","toPickUpTimeMinStore","toPickUpTimeMaxStore","setToPickUpTimeMin","setToPickUpTimeMax","setTo","Header","AppBar","position","elevation","borderBottom","t","concat","palette","divider","Toolbar","noWrap","PickUp","getStepContent","useCallback","steps_from","steps_type","steps_date","from_info","steps_nature","steps_pass","steps_call","steps_to","header","Paper","my","md","p","Stepper","activeStep","alternativeLabel","pt","pb","Array","fill","map","el","i","Step","key","StepLabel","PickUpCheck","loading","isNext","setIsNext","success","setSuccess","setError","format","objectSpread","then","catch","finally","CircularProgress","size","Choose","appNumber","setToData","setAddressData","DateComponent","dateStore","Address","navigation","Delivery","delivery_steps_to","delivery_steps_type","delivery_steps_date","delivery_steps_from","delivery_steps_nature","steps_address","delivery_steps_pass","delivery_steps_call","DeliveryCheck","AppRouter","getItem","style","height","width","dist","react_router_dist","path","element","choose","pick_up","pick_up_check","delivery_check","replace","sign_in","sign_up","store","configureStore","reducer","DeliverySlice","theme","createTheme","ReactDOM","createRoot","document","getElementById","render","StrictMode","es","ThemeProvider","app_router"],"mappings":"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","file":"static/js/main.0a6fd494.chunk.js","sourcesContent":["import Typography from \"@mui/material/Typography\";\r\nimport Link from \"@mui/material/Link\";\r\nimport * as React from \"react\";\r\nimport {FC} from \"react\";\r\n\r\nconst Copyright: FC<any> = (props) => {\r\n    return (\r\n        <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\r\n            {'Copyright © '}\r\n            <Link color=\"inherit\">\r\n                Закажи Доставку\r\n            </Link>{' '}\r\n            {new Date().getFullYear()}\r\n        </Typography>\r\n    );\r\n}\r\n\r\nexport default Copyright\r\n","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport axios from 'axios'\r\nimport {User} from \"../../interfaces/interfaces\";\r\n\r\nconst API_URL = 'https://закажи-доставку.рф/api'\r\n\r\nexport const loginThunk = createAsyncThunk(\r\n    'auth/login',\r\n    async (data: { email: string, password: string }) => {\r\n        const res = await axios.post(API_URL + '/auth/login', data, {validateStatus: null})\r\n\r\n        return {\r\n            status: res.status,\r\n            data: res.data\r\n        }\r\n    }\r\n)\r\n\r\nexport const registrationThunk = createAsyncThunk(\r\n    'auth/registration',\r\n    async (data: User) => {\r\n        const res = await axios.post(API_URL + '/auth/registration', data, {validateStatus: null})\r\n\r\n        return {\r\n            status: res.status,\r\n            data: res.data\r\n        }\r\n    }\r\n)\r\n\r\nexport const refreshThunk = createAsyncThunk(\r\n    'auth/refresh',\r\n    async (data: { jwt: string }) => {\r\n        const res = await axios.post(API_URL + '/auth/refresh', data, {validateStatus: null})\r\n\r\n        return {\r\n            status: res.status,\r\n            data: res.data\r\n        }\r\n    }\r\n)\r\n","import {RootState} from \"../store\";\r\n\r\nexport const PickUpSelector = (state: RootState) => state.pickUp\r\nexport const DeliverySelector = (state: RootState) => state.delivery\r\nexport const AuthSelector = (state: RootState) => state.auth\r\n","import React, {FC} from 'react'\r\nimport {Alert, Snackbar} from \"@mui/material\";\r\n\r\ninterface Props {\r\n    open: boolean,\r\n    setOpen: React.Dispatch<React.SetStateAction<boolean>>\r\n    message?: string | null\r\n    isSuccess?: boolean\r\n}\r\n\r\nconst CustomAlert: FC<Props> = ({open, setOpen, message, isSuccess}) => {\r\n    return (\r\n        <Snackbar\r\n            anchorOrigin={{vertical: 'top', horizontal: 'right'}}\r\n            open={open}\r\n            autoHideDuration={3000}\r\n            onClose={() => setOpen(false)}\r\n        >\r\n            <Alert\r\n                onClose={() => setOpen(false)}\r\n                severity={isSuccess ? \"success\" : \"warning\"}\r\n            >\r\n                {message || 'Заполните все поля!'}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n\r\nexport default CustomAlert\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {loginThunk, refreshThunk, registrationThunk} from \"../thunks/auth-thunk\";\r\n\r\ninterface InitialState {\r\n    isAuth: boolean\r\n    error: string | null\r\n    isLoading: boolean\r\n}\r\n\r\nconst initialState: InitialState = {\r\n    isAuth: false,\r\n    error: null,\r\n    isLoading: true\r\n}\r\n\r\nconst AuthSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setAuth(state, action: PayloadAction<boolean>) {\r\n            state.isAuth = action.payload\r\n            state.error = null\r\n        },\r\n        registration(state) {\r\n            localStorage.setItem('auth', 'true')\r\n            state.isAuth = true\r\n        },\r\n        clearError(state) {\r\n            state.error = null\r\n        },\r\n        setLoading(state, action: PayloadAction<boolean>) {\r\n            state.isLoading = action.payload\r\n        }\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(loginThunk.fulfilled, (state, action) => {\r\n            if(action.payload.status === 200) {\r\n                state.isAuth = true\r\n                state.error = null\r\n\r\n                localStorage.setItem('jwt', action.payload.data.jwt)\r\n            } else {\r\n                state.isAuth = false\r\n                state.error = action.payload.data.message\r\n            }\r\n        })\r\n        builder.addCase(registrationThunk.fulfilled, (state, action) => {\r\n            if(action.payload.status === 200) {\r\n                state.isAuth = true\r\n                state.error = null\r\n\r\n                localStorage.setItem('jwt', action.payload.data.jwt)\r\n            } else {\r\n                state.isAuth = false\r\n                state.error = action.payload.data.message\r\n            }\r\n        })\r\n        builder.addCase(refreshThunk.fulfilled, (state, action) => {\r\n            if(action.payload.status === 200) {\r\n                state.isAuth = true\r\n                state.error = null\r\n                state.isLoading = false\r\n\r\n                localStorage.setItem('jwt', action.payload.data.jwt)\r\n            } else {\r\n                state.isAuth = false\r\n                state.error = action.payload.data.message\r\n            }\r\n        })\r\n    }\r\n})\r\n\r\nexport const {clearError, setLoading} = AuthSlice.actions\r\nexport default AuthSlice.reducer\r\n","import * as React from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Link from '@mui/material/Link';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport {FC, useEffect, useState} from \"react\";\r\nimport Copyright from \"../../components/copyright\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginThunk} from \"../../store/thunks/auth-thunk\";\r\nimport {AuthSelector} from \"../../store/selectors/selectors\";\r\nimport CustomAlert from \"../../components/alert\";\r\nimport {clearError} from \"../../store/slices/auth-slice\";\r\n\r\n\r\nconst SignIn: FC = () => {\r\n    const {error} = useSelector(AuthSelector)\r\n    const [open, setOpen] = useState(false)\r\n    const dispatch = useDispatch()\r\n    const navigate = useNavigate()\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        // @ts-ignore\r\n        dispatch(loginThunk({\r\n            email: data.get('email') as string,\r\n            password: data.get('password') as string,\r\n        }))\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setOpen(true)\r\n        }\r\n    }, [error])\r\n\r\n    useEffect(() => {\r\n        if (!open) {\r\n            dispatch(clearError())\r\n        }\r\n    }, [open])\r\n\r\n    return (\r\n        <>\r\n            {open && <CustomAlert message={error} open={open} setOpen={setOpen}/>}\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{m: 1, bgcolor: 'secondary.main'}}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Вход в аккаунт\r\n                    </Typography>\r\n                    <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{mt: 1}}>\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"email\"\r\n                            label=\"Email\"\r\n                            name=\"email\"\r\n                            autoComplete=\"email\"\r\n                            autoFocus\r\n                        />\r\n                        <TextField\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Пароль\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox value=\"remember\" color=\"primary\"/>}\r\n                            label=\"Запомнить меня\"\r\n                        />\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{mt: 3, mb: 2}}\r\n                        >\r\n                            Войти в аккаунт\r\n                        </Button>\r\n                        <Grid container justifyContent=\"center\">\r\n                            <Grid item>\r\n                                <Link onClick={() => navigate('/sign-up')} variant=\"body2\">\r\n                                    {\"Нет аккаунта? Регистрация\"}\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n                <Copyright sx={{mt: 8, mb: 4}}/>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SignIn\r\n","import * as React from 'react';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Button from '@mui/material/Button';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport TextField from '@mui/material/TextField';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\nimport Typography from '@mui/material/Typography';\r\nimport Container from '@mui/material/Container';\r\nimport Copyright from \"../../components/copyright\";\r\nimport {FC, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport CustomAlert from \"../../components/alert\";\r\nimport {Link} from '@mui/material';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {registrationThunk} from \"../../store/thunks/auth-thunk\";\r\nimport {AuthSelector} from \"../../store/selectors/selectors\";\r\nimport {clearError} from \"../../store/slices/auth-slice\";\r\n\r\n\r\nconst SignUp: FC = () => {\r\n    const {error} = useSelector(AuthSelector)\r\n    const navigate = useNavigate()\r\n    const dispatch = useDispatch()\r\n    const [open, setOpen] = useState(false)\r\n    const [accept, setAccept] = useState(false)\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        if (\r\n            data.get('email') &&\r\n            data.get('password') &&\r\n            data.get('firstName') &&\r\n            data.get('lastName') &&\r\n            data.get('company') &&\r\n            accept\r\n        ) {\r\n            // @ts-ignore\r\n            dispatch(registrationThunk({\r\n                email: data.get('email') as string,\r\n                password: data.get('password') as string,\r\n                firstName: data.get('firstName') as string,\r\n                lastName: data.get('lastName') as string,\r\n                company: data.get('company') as string,\r\n            }))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (error) {\r\n            setOpen(true)\r\n        }\r\n    }, [error])\r\n\r\n    useEffect(() => {\r\n        if (!open) {\r\n            dispatch(clearError())\r\n        }\r\n    }, [open])\r\n\r\n    return (\r\n        <>\r\n            {open && <CustomAlert message={error} open={open} setOpen={setOpen}/>}\r\n            <Container component=\"main\" maxWidth=\"xs\">\r\n                <CssBaseline/>\r\n                <Box\r\n                    sx={{\r\n                        marginTop: 8,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        alignItems: 'center',\r\n                    }}\r\n                >\r\n                    <Avatar sx={{m: 1, bgcolor: 'secondary.main'}}>\r\n                        <LockOutlinedIcon/>\r\n                    </Avatar>\r\n                    <Typography component=\"h1\" variant=\"h5\">\r\n                        Регистрация\r\n                    </Typography>\r\n                    <Box component=\"form\" noValidate onSubmit={handleSubmit} sx={{mt: 3}}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    autoComplete=\"given-name\"\r\n                                    name=\"firstName\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"firstName\"\r\n                                    label=\"Имя\"\r\n                                    autoFocus\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"lastName\"\r\n                                    label=\"Фамилия\"\r\n                                    name=\"lastName\"\r\n                                    autoComplete=\"family-name\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"company\"\r\n                                    label=\"Название компании\"\r\n                                    name=\"company\"\r\n                                    autoComplete=\"company\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"email\"\r\n                                    label=\"Email\"\r\n                                    name=\"email\"\r\n                                    autoComplete=\"email\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    name=\"password\"\r\n                                    label=\"Пароль\"\r\n                                    type=\"password\"\r\n                                    id=\"password\"\r\n                                    autoComplete=\"new-password\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12}>\r\n                                <FormControlLabel\r\n                                    checked={accept}\r\n                                    onChange={() => setAccept(accept => !accept)}\r\n                                    control={<Checkbox value=\"allowExtraEmails\" color=\"primary\"/>}\r\n                                    label=\"Я соглашаюсь с условиями обработки персональных данных\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Button\r\n                            type=\"submit\"\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            sx={{mt: 3, mb: 2}}\r\n                        >\r\n                            Зарегистрироваться\r\n                        </Button>\r\n                        <Grid container justifyContent=\"center\">\r\n                            <Grid item>\r\n                                <Link onClick={() => navigate('/sign-in')} variant=\"body2\">\r\n                                    Уже есть аккаунт? Вход\r\n                                </Link>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Box>\r\n                <Copyright sx={{mt: 5}}/>\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SignUp\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dayjs} from \"dayjs\";\r\n\r\ninterface State {\r\n    step: number\r\n    from: string,\r\n    type: string\r\n    ready: string\r\n    readyDate: null | Dayjs\r\n    readyTime: null | Dayjs\r\n    pickUpDate: null | Dayjs\r\n    orderNumber: string\r\n    powerOfAttorney: string\r\n    supplierOrderNumber: string\r\n    companyName: string\r\n    fromLastName: string\r\n    fromFirstName: string\r\n    fromPhone: string\r\n    fromExtraPhone: string\r\n    fromAddress: string\r\n    fromExtraAddress: string\r\n    fromCompanyName: string\r\n    fromPickUpTimeMin: null | Dayjs\r\n    fromPickUpTimeMax: null | Dayjs\r\n    fromDocuments: string\r\n    nature: string\r\n    natureDescription: string\r\n    needPass: string\r\n    call: string\r\n\r\n    to: string\r\n    toLastName: string\r\n    toFirstName: string\r\n    toPhone: string\r\n    toExtraPhone: string\r\n    toAddress: string\r\n    toExtraAddress: string\r\n    toCompanyName: string\r\n    toPickUpTimeMin: null | Dayjs\r\n    toPickUpTimeMax: null | Dayjs\r\n    toDocuments: string\r\n}\r\n\r\nconst initialState: State = {\r\n    step: 0,\r\n    from: '',\r\n    type: '',\r\n    ready: '',\r\n    readyDate: null,\r\n    readyTime: null,\r\n    pickUpDate: null,\r\n    orderNumber: '',\r\n    powerOfAttorney: '',\r\n    supplierOrderNumber: '',\r\n    companyName: '',\r\n    fromLastName: '',\r\n    fromFirstName: '',\r\n    fromPhone: '',\r\n    fromExtraPhone: '',\r\n    fromAddress: '',\r\n    fromExtraAddress: '',\r\n    fromCompanyName: '',\r\n    fromPickUpTimeMin: null,\r\n    fromPickUpTimeMax: null,\r\n    fromDocuments: '',\r\n    nature: '',\r\n    natureDescription: '',\r\n    needPass: '',\r\n    call: '',\r\n\r\n    to: '',\r\n    toLastName: '',\r\n    toFirstName: '',\r\n    toPhone: '',\r\n    toExtraPhone: '',\r\n    toAddress: '',\r\n    toExtraAddress: '',\r\n    toCompanyName: '',\r\n    toPickUpTimeMin: null,\r\n    toPickUpTimeMax: null,\r\n    toDocuments: '',\r\n}\r\n\r\nconst PickUpSlice = createSlice({\r\n    name: 'receipt',\r\n    initialState,\r\n    reducers: {\r\n        incrementStep(state) {\r\n            ++state.step\r\n        },\r\n        clearState: () => initialState,\r\n        decrementStep(state) {\r\n            --state.step\r\n        },\r\n        setFromData(state, action: PayloadAction<string>) {\r\n            ++state.step\r\n            state.from = action.payload\r\n        },\r\n        setTypeData(state, action: PayloadAction<string>) {\r\n            ++state.step\r\n            state.type = action.payload\r\n        },\r\n        setDateData(state, action: PayloadAction<{\r\n            pickUpDate: Dayjs | null,\r\n            orderNumber: string,\r\n            powerOfAttorney: string,\r\n            companyName: string,\r\n            supplierOrderNumber: string,\r\n            ready: string,\r\n            readyDate: null | Dayjs\r\n            readyTime: null | Dayjs\r\n        }>) {\r\n            ++state.step\r\n            state.pickUpDate = action.payload.pickUpDate\r\n            state.orderNumber = action.payload.orderNumber\r\n            state.powerOfAttorney = action.payload.powerOfAttorney\r\n            state.companyName = action.payload.companyName\r\n            state.supplierOrderNumber = action.payload.supplierOrderNumber\r\n            state.ready = action.payload.ready\r\n            state.readyDate = action.payload.readyDate\r\n            state.readyTime = action.payload.readyTime\r\n        },\r\n        setFromInfoData(state, action: PayloadAction<{\r\n            fromLastName: string\r\n            fromFirstName: string\r\n            fromPhone: string\r\n            fromExtraPhone: string\r\n            fromAddress: string\r\n            fromExtraAddress: string\r\n            fromCompanyName: string\r\n            fromPickUpTimeMin: null | Dayjs\r\n            fromPickUpTimeMax: null | Dayjs\r\n            fromDocuments: string\r\n        }>) {\r\n            ++state.step\r\n            state.fromLastName = action.payload.fromLastName\r\n            state.fromFirstName = action.payload.fromFirstName\r\n            state.fromPhone = action.payload.fromPhone\r\n            state.fromExtraPhone = action.payload.fromExtraPhone\r\n            state.fromAddress = action.payload.fromAddress\r\n            state.fromExtraAddress = action.payload.fromExtraAddress\r\n            state.fromCompanyName = action.payload.fromCompanyName\r\n            state.fromPickUpTimeMin = action.payload.fromPickUpTimeMin\r\n            state.fromPickUpTimeMax = action.payload.fromPickUpTimeMax\r\n            state.fromDocuments = action.payload.fromDocuments\r\n        },\r\n        setNatureData(state, action: PayloadAction<{\r\n            nature: string\r\n            natureDescription: string\r\n        }>) {\r\n            ++state.step\r\n            state.nature = action.payload.nature\r\n            state.natureDescription = action.payload.natureDescription\r\n        },\r\n        setPassData(state, action: PayloadAction<{ needPass: string }>) {\r\n            ++state.step\r\n            state.needPass = action.payload.needPass\r\n        },\r\n        setCallData(state, action: PayloadAction<{ call: string }>) {\r\n            ++state.step\r\n            state.call = action.payload.call\r\n        },\r\n        setToInfoData(state, action: PayloadAction<{\r\n            to: string\r\n            toLastName: string\r\n            toFirstName: string\r\n            toPhone: string\r\n            toExtraPhone: string\r\n            toAddress: string\r\n            toExtraAddress: string\r\n            toCompanyName: string\r\n            toPickUpTimeMin: null | Dayjs\r\n            toPickUpTimeMax: null | Dayjs\r\n            toDocuments: string\r\n        }>) {\r\n            state.to = action.payload.to\r\n            state.toLastName = action.payload.toLastName\r\n            state.toFirstName = action.payload.toFirstName\r\n            state.toPhone = action.payload.toPhone\r\n            state.toExtraPhone = action.payload.toExtraPhone\r\n            state.toAddress = action.payload.toAddress\r\n            state.toExtraAddress = action.payload.toExtraAddress\r\n            state.toCompanyName = action.payload.toCompanyName\r\n            state.toPickUpTimeMin = action.payload.toPickUpTimeMin\r\n            state.toPickUpTimeMax = action.payload.toPickUpTimeMax\r\n            state.toDocuments = action.payload.toDocuments\r\n        }\r\n    }\r\n})\r\n\r\nexport const {\r\n    clearState,\r\n    incrementStep,\r\n    decrementStep,\r\n    setFromData,\r\n    setTypeData,\r\n    setDateData,\r\n    setFromInfoData,\r\n    setNatureData,\r\n    setPassData,\r\n    setCallData,\r\n    setToInfoData\r\n} = PickUpSlice.actions\r\nexport default PickUpSlice.reducer\r\n","import {Box, Button, RadioGroup, Typography, Radio, FormControlLabel} from '@mui/material'\r\nimport React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {setFromData} from \"../../../store/slices/pick-up-slice\";\r\nimport CustomAlert from \"../../../components/alert\";\r\n\r\nconst From: FC = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const {from} = useSelector(PickUpSelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n    const navigate = useNavigate()\r\n\r\n    const handleBack = () => {\r\n        navigate('/choose')\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const from = data.get('from') as string\r\n\r\n        if (from) {\r\n            dispatch(setFromData(from))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Забираем от:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-from\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={from}\r\n                >\r\n                    <FormControlLabel name='from' value=\"подрядчик\" control={<Radio/>} label=\"Подрядчика\"/>\r\n                    <FormControlLabel name='from' value=\"поставщик\" control={<Radio/>} label=\"Поставщика\"/>\r\n                </RadioGroup>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button type=\"submit\" variant=\"contained\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default From\r\n","import {Box, Button, RadioGroup, Typography, Radio, FormControlLabel} from '@mui/material'\r\nimport React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {decrementStep, setTypeData} from \"../../../store/slices/pick-up-slice\";\r\nimport CustomAlert from \"../../../components/alert\";\r\n\r\nconst Type: FC = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const {type} = useSelector(PickUpSelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const type = data.get('type') as string\r\n\r\n        if (type) {\r\n            dispatch(setTypeData(type))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Выберите вид услуги:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-type\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={type}\r\n                >\r\n                    <FormControlLabel name=\"type\" value=\"пеший\" control={<Radio/>} label=\"Пеший\"/>\r\n                    <FormControlLabel name=\"type\" value=\"авто\" control={<Radio/>} label=\"Авто\"/>\r\n                </RadioGroup>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Type\r\n","import {\r\n    Box,\r\n    Button,\r\n    Typography,\r\n    Grid,\r\n    TextField,\r\n    FormControlLabel,\r\n    Radio,\r\n    RadioGroup\r\n} from '@mui/material'\r\nimport React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {decrementStep, setDateData,} from \"../../../store/slices/pick-up-slice\";\r\nimport {AdapterDayjs} from '@mui/x-date-pickers/AdapterDayjs';\r\nimport {LocalizationProvider} from '@mui/x-date-pickers/LocalizationProvider';\r\nimport {DatePicker} from '@mui/x-date-pickers/DatePicker';\r\nimport 'dayjs/locale/ru';\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport dayjs, {Dayjs} from \"dayjs\";\r\nimport {TimePicker} from \"@mui/x-date-pickers\";\r\n\r\nconst Type: FC = () => {\r\n    const {\r\n        ready: readyStore,\r\n        readyDate: readyDateStore,\r\n        readyTime: readyTimeStore,\r\n        pickUpDate,\r\n        orderNumber,\r\n        powerOfAttorney,\r\n        companyName,\r\n        supplierOrderNumber\r\n    } = useSelector(PickUpSelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [open, setOpen] = useState(false)\r\n    const [date, setDate] = useState<Dayjs | null>(pickUpDate)\r\n\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [openReadyPicker, setOpenReadyPicker] = useState(false)\r\n\r\n    const [ready, setReady] = useState(readyStore)\r\n    const [power, setPower] = useState(powerOfAttorney)\r\n\r\n    const [readyDate, setReadyDate] = useState<Dayjs | null>(readyDateStore)\r\n    const [readyTime, setReadyTime] = useState<Dayjs | null>(readyTimeStore)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const orderNumber = data.get('orderNumber') as string\r\n        const companyName = data.get('companyName') as string\r\n        const supplierOrderNumber = data.get('supplierOrderNumber') as string\r\n\r\n        if (\r\n            date && orderNumber && supplierOrderNumber &&\r\n            (power === 'Без доверенности' || power && companyName) &&\r\n            ((ready === 'заказ не готов' && readyDate && readyTime) || ready === 'заказ готов')\r\n        ) {\r\n            dispatch(setDateData({\r\n                pickUpDate: date,\r\n                orderNumber,\r\n                companyName,\r\n                supplierOrderNumber,\r\n                ready,\r\n                readyDate,\r\n                readyTime,\r\n                powerOfAttorney: power\r\n            }))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите следующие данные:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <LocalizationProvider\r\n                            dateAdapter={AdapterDayjs}\r\n                            adapterLocale='ru'\r\n                        >\r\n                            <DatePicker\r\n                                open={openPicker}\r\n                                onOpen={() => setOpenPicker(true)}\r\n                                onClose={() => setOpenPicker(false)}\r\n                                minDate={dayjs().add(1, 'day')}\r\n                                label=\"Дата забора *\"\r\n                                value={date}\r\n                                onChange={e => setDate(e)}\r\n                                renderInput={(params) =>\r\n                                    <TextField\r\n                                        focused={false}\r\n                                        onClick={() => setOpenPicker(true)}\r\n                                        onKeyDown={e => e.preventDefault()}\r\n                                        fullWidth\r\n                                        {...params}\r\n                                    />}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"supplierOrderNumber\"\r\n                            name=\"supplierOrderNumber\"\r\n                            label=\"Номер заказа или счета у поставщика/подрядчика\"\r\n                            fullWidth\r\n                            autoComplete=\"supplierOrderNumber\"\r\n                            defaultValue={supplierOrderNumber}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"orderNumber\"\r\n                            name=\"orderNumber\"\r\n                            label=\"Номер внутреннего заказа или счета\"\r\n                            fullWidth\r\n                            autoComplete=\"orderNumber\"\r\n                            defaultValue={orderNumber}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <RadioGroup\r\n                            aria-labelledby=\"pick-up-from\"\r\n                            name=\"radio-buttons-group\"\r\n                            value={ready}\r\n                            onChange={e => setReady(e.target.value)}\r\n                        >\r\n                            <FormControlLabel name='ready' value=\"заказ готов\" control={<Radio/>} label=\"Заказ готов\"/>\r\n                            <FormControlLabel name='ready' value=\"заказ не готов\" control={<Radio/>}\r\n                                              label=\"Заказ не готов\"/>\r\n                        </RadioGroup>\r\n                    </Grid>\r\n\r\n                    {\r\n                        ready === \"заказ не готов\" &&\r\n                        <Grid item xs={12}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <LocalizationProvider\r\n                                        dateAdapter={AdapterDayjs}\r\n                                        adapterLocale='ru'\r\n                                    >\r\n                                        <DatePicker\r\n                                            open={openReadyPicker}\r\n                                            onOpen={() => setOpenReadyPicker(true)}\r\n                                            onClose={() => setOpenReadyPicker(false)}\r\n                                            minDate={dayjs()}\r\n                                            label=\"Дата готовности *\"\r\n                                            value={readyDate}\r\n                                            onChange={e => setReadyDate(e)}\r\n                                            renderInput={(params) =>\r\n                                                <TextField\r\n                                                    focused={false}\r\n                                                    onClick={() => setOpenReadyPicker(true)}\r\n                                                    onKeyDown={e => e.preventDefault()}\r\n                                                    fullWidth\r\n                                                    {...params}\r\n                                                />\r\n                                            }\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={6}>\r\n                                    <LocalizationProvider\r\n                                        dateAdapter={AdapterDayjs}\r\n                                        adapterLocale='ru'\r\n                                    >\r\n                                        <TimePicker\r\n                                            label=\"Время готовности *\"\r\n                                            value={readyTime}\r\n                                            onChange={(newValue) => setReadyTime(newValue)}\r\n                                            renderInput={(params) => <TextField fullWidth {...params} />}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    }\r\n\r\n\r\n                    <Grid item xs={12}>\r\n                        <RadioGroup\r\n                            aria-labelledby=\"powerOfAttorney\"\r\n                            name=\"powerOfAttorney-radio-buttons-group\"\r\n                            value={power}\r\n                            onChange={e => setPower(e.target.value)}\r\n                        >\r\n                            <FormControlLabel name='powerOfAttorney' value=\"Есть доверенность\" control={<Radio/>}\r\n                                              label=\"Есть доверенность\"/>\r\n                            <FormControlLabel name='powerOfAttorney' value=\"Без доверенности\" control={<Radio/>}\r\n                                              label=\"Без доверенности\"/>\r\n                        </RadioGroup>\r\n                    </Grid>\r\n\r\n                    {\r\n                        power === 'Есть доверенность' &&\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                id=\"companyName\"\r\n                                name=\"companyName\"\r\n                                label=\"От какой организации доверенность *\"\r\n                                fullWidth\r\n                                autoComplete=\"companyName\"\r\n                                defaultValue={companyName}\r\n                            />\r\n                        </Grid>\r\n                    }\r\n                </Grid>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Type\r\n","import {Box, Button, Typography, Grid, TextField, FormControlLabel} from '@mui/material'\r\nimport React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {LocalizationProvider, TimePicker} from '@mui/x-date-pickers';\r\nimport {AdapterDayjs} from '@mui/x-date-pickers/AdapterDayjs';\r\nimport 'dayjs/locale/ru';\r\nimport {Dayjs} from 'dayjs';\r\nimport {decrementStep, setFromInfoData} from \"../../../store/slices/pick-up-slice\";\r\nimport CustomAlert from \"../../../components/alert\";\r\n\r\nconst FromInfo: FC = () => {\r\n    const {\r\n        fromLastName,\r\n        fromFirstName,\r\n        fromPhone,\r\n        fromExtraPhone,\r\n        fromAddress,\r\n        fromExtraAddress,\r\n        fromCompanyName,\r\n        fromPickUpTimeMin: fromPickUpTimeMinStore,\r\n        fromPickUpTimeMax: fromPickUpTimeMaxStore,\r\n        fromDocuments,\r\n    } = useSelector(PickUpSelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [fromPickUpTimeMin, setFromPickUpTimeMin] = React.useState<Dayjs | null>(fromPickUpTimeMinStore);\r\n    const [fromPickUpTimeMax, setFromPickUpTimeMax] = React.useState<Dayjs | null>(fromPickUpTimeMaxStore);\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const lastName = data.get('lastName') as string\r\n        const firstName = data.get('firstName') as string\r\n        const phoneNumber = data.get('phoneNumber') as string\r\n        const extraPhoneNumber = data.get('extraPhoneNumber') as string\r\n        const address = data.get('address') as string\r\n        const extraAddress = data.get('extraAddress') as string\r\n        const documents = data.get('documents') as string\r\n        const company = data.get('company') as string\r\n\r\n        if (lastName && firstName && phoneNumber && address && company && fromPickUpTimeMin && fromPickUpTimeMax) {\r\n            dispatch(setFromInfoData({\r\n                fromLastName: lastName,\r\n                fromFirstName: firstName,\r\n                fromPhone: phoneNumber,\r\n                fromExtraPhone: extraPhoneNumber,\r\n                fromAddress: address,\r\n                fromExtraAddress: extraAddress,\r\n                fromCompanyName: company,\r\n                fromPickUpTimeMin,\r\n                fromPickUpTimeMax,\r\n                fromDocuments: documents\r\n            }))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите данные от кого забирать:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"company\"\r\n                            name=\"company\"\r\n                            label=\"Название организации\"\r\n                            fullWidth\r\n                            autoComplete=\"organization\"\r\n                            defaultValue={fromCompanyName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"address\"\r\n                            name=\"address\"\r\n                            label=\"Адрес\"\r\n                            fullWidth\r\n                            autoComplete=\"street-address\"\r\n                            defaultValue={fromAddress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"extraAddress\"\r\n                            name=\"extraAddress\"\r\n                            label=\"Доп. адрес\"\r\n                            fullWidth\r\n                            autoComplete=\"street-address\"\r\n                            defaultValue={fromExtraAddress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <LocalizationProvider\r\n                            dateAdapter={AdapterDayjs}\r\n                            adapterLocale='ru'\r\n                        >\r\n                            <TimePicker\r\n                                label=\"Время забора с *\"\r\n                                value={fromPickUpTimeMin}\r\n                                onChange={(newValue) => setFromPickUpTimeMin(newValue)}\r\n                                renderInput={(params) => <TextField fullWidth {...params} />}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <LocalizationProvider\r\n                            dateAdapter={AdapterDayjs}\r\n                            adapterLocale='ru'\r\n                        >\r\n                            <TimePicker\r\n                                label=\"Время забора до *\"\r\n                                value={fromPickUpTimeMax}\r\n                                onChange={(newValue) => setFromPickUpTimeMax(newValue)}\r\n                                renderInput={(params) => <TextField fullWidth {...params} />}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            label=\"Фамилия\"\r\n                            fullWidth\r\n                            autoComplete=\"family-name\"\r\n                            defaultValue={fromLastName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            label=\"Имя\"\r\n                            fullWidth\r\n                            autoComplete=\"given-name\"\r\n                            defaultValue={fromFirstName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"phoneNumber\"\r\n                            name=\"phoneNumber\"\r\n                            label=\"Номер телефона\"\r\n                            fullWidth\r\n                            autoComplete=\"tel\"\r\n                            type=\"phone\"\r\n                            defaultValue={fromPhone}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"extraPhoneNumber\"\r\n                            name=\"extraPhoneNumber\"\r\n                            label=\"Доп. номер телефона\"\r\n                            fullWidth\r\n                            autoComplete=\"tel\"\r\n                            type=\"phone\"\r\n                            defaultValue={fromExtraPhone}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"documents\"\r\n                            name=\"documents\"\r\n                            label=\"Комментарий\"\r\n                            fullWidth\r\n                            autoComplete=\"documents\"\r\n                            defaultValue={fromDocuments}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FromInfo\r\n","import React, {FC, useState} from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControlLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    TextField,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {decrementStep, setNatureData} from \"../../../store/slices/pick-up-slice\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport CustomAlert from \"../../../components/alert\";\r\n\r\nconst Nature: FC = () => {\r\n    const {nature, natureDescription} = useSelector(PickUpSelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const nature = data.get('nature') as string\r\n        const description = data.get('description') as string\r\n\r\n        if (nature && description) {\r\n            dispatch(setNatureData({nature, natureDescription: description}))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите тип груза:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-nature\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={nature}\r\n                >\r\n                    <FormControlLabel name=\"nature\" value=\"коробка\" control={<Radio/>} label=\"Коробка\"/>\r\n                    <FormControlLabel name=\"nature\" value=\"пачка\" control={<Radio/>} label=\"Пачка\"/>\r\n                    <FormControlLabel name=\"nature\" value=\"другое\" control={<Radio/>} label=\"Другое\"/>\r\n                </RadioGroup>\r\n                <TextField\r\n                    defaultValue={natureDescription}\r\n                    name=\"description\"\r\n                    required\r\n                    id=\"outlined-multiline-flexible\"\r\n                    label=\"Описание\"\r\n                    multiline\r\n                    maxRows={4}\r\n                    placeholder=\"ВАЖНО: После выбора Коробка и Пачка, необходимо написать количество и вес. При выборе ДРУГОЕ опишите характер груза (например: Баннер длинной 2,30м; Паллет 400кг и т.д.)\"\r\n                    fullWidth\r\n                />\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Nature\r\n","import React, {useState} from 'react'\r\nimport {Box, Button, FormControlLabel, Radio, RadioGroup, Typography} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {decrementStep, setPassData} from \"../../../store/slices/pick-up-slice\";\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport CustomAlert from \"../../../components/alert\";\r\n\r\nconst Pass = () => {\r\n    const {needPass} = useSelector(PickUpSelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const pass = data.get('pass') as string\r\n\r\n        if (pass) {\r\n            dispatch(setPassData({needPass: pass}))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Нужен ли пропуск:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-pass\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={needPass}\r\n                >\r\n                    <FormControlLabel name=\"pass\" value=\"нужен\" control={<Radio/>} label=\"Пропуск нужен\"/>\r\n                    <FormControlLabel name=\"pass\" value=\"не нужен\" control={<Radio/>} label=\"Пропуск не нужен\"/>\r\n                </RadioGroup>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Pass\r\n","import React, {FC, useState} from 'react'\r\nimport {Box, Button, FormControlLabel, Radio, RadioGroup, Typography} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {\r\n    decrementStep,\r\n    incrementStep,\r\n    setCallData,\r\n    setPassData\r\n} from \"../../../store/slices/pick-up-slice\";\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport CustomAlert from \"../../../components/alert\";\r\n\r\nconst Call: FC = () => {\r\n    const {call} = useSelector(PickUpSelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const call = data.get('call') as string\r\n\r\n        if (call) {\r\n            dispatch(setCallData({call}))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Нужно ли созвониться заранее:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-call\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={call}\r\n                >\r\n                    <FormControlLabel name=\"call\" value=\"15 минут\" control={<Radio/>} label=\"Созвониться за 15 минут\"/>\r\n                    <FormControlLabel name=\"call\" value=\"30 минут\" control={<Radio/>} label=\"Созвониться за 30 минут\"/>\r\n                    <FormControlLabel name=\"call\" value=\"1 час\" control={<Radio/>} label=\"Созвониться за час\"/>\r\n                    <FormControlLabel name=\"call\" value=\"3 часа\" control={<Radio/>} label=\"Созвониться за 3 часа\"/>\r\n                    <FormControlLabel name=\"call\" value=\"не нужно\" control={<Radio/>} label=\"Созвониваться не нужно\"/>\r\n                </RadioGroup>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Call\r\n","import React, {FC, useState} from 'react'\r\nimport {Box, Button, FormControlLabel, Grid, Radio, RadioGroup, TextField, Typography} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {decrementStep, setToInfoData} from \"../../../store/slices/pick-up-slice\";\r\nimport {LocalizationProvider, TimePicker} from \"@mui/x-date-pickers\";\r\nimport {AdapterDayjs} from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport {Dayjs} from \"dayjs\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst To: FC = () => {\r\n    const {\r\n        to: storeTo,\r\n        toLastName,\r\n        toFirstName,\r\n        toPhone,\r\n        toExtraPhone,\r\n        toAddress,\r\n        toExtraAddress,\r\n        toCompanyName,\r\n        toPickUpTimeMin: toPickUpTimeMinStore,\r\n        toPickUpTimeMax: toPickUpTimeMaxStore,\r\n    } = useSelector(PickUpSelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [toPickUpTimeMin, setToPickUpTimeMin] = React.useState<Dayjs | null>(toPickUpTimeMinStore);\r\n    const [toPickUpTimeMax, setToPickUpTimeMax] = React.useState<Dayjs | null>(toPickUpTimeMaxStore);\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const [to, setTo] = useState(storeTo)\r\n\r\n    const navigate = useNavigate()\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const lastName = data.get('lastName') as string\r\n        const firstName = data.get('firstName') as string\r\n        const phoneNumber = data.get('phoneNumber') as string\r\n        const extraPhoneNumber = data.get('extraPhoneNumber') as string\r\n        const address = data.get('address') as string\r\n        const extraAddress = data.get('extraAddress') as string\r\n        const documents = data.get('documents') as string\r\n        const company = data.get('company') as string\r\n\r\n        if (to === 'Офис' ||\r\n            to && company && toPickUpTimeMin && toPickUpTimeMax && address && lastName && firstName && phoneNumber) {\r\n            dispatch(setToInfoData({\r\n                to,\r\n                toLastName: lastName,\r\n                toFirstName: firstName,\r\n                toPhone: phoneNumber,\r\n                toExtraPhone: extraPhoneNumber,\r\n                toAddress: address,\r\n                toExtraAddress: extraAddress,\r\n                toCompanyName: company,\r\n                toPickUpTimeMin,\r\n                toPickUpTimeMax,\r\n                toDocuments: documents\r\n            }))\r\n            navigate('/pick-up-check')\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите адрес доставки:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-to\"\r\n                    name=\"radio-buttons-group\"\r\n                    value={to}\r\n                    onChange={e => setTo(e.target.value)}\r\n                >\r\n                    <FormControlLabel value=\"Офис\" control={<Radio/>} label=\"Офис\"/>\r\n                    <FormControlLabel value=\"Другое\" control={<Radio/>} label=\"Другое\"/>\r\n                </RadioGroup>\r\n                {to === 'Другое' &&\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                required\r\n                                id=\"company\"\r\n                                name=\"company\"\r\n                                label=\"Название организации\"\r\n                                fullWidth\r\n                                autoComplete=\"organization\"\r\n                                defaultValue={toCompanyName}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                required\r\n                                id=\"address\"\r\n                                name=\"address\"\r\n                                label=\"Адрес\"\r\n                                fullWidth\r\n                                autoComplete=\"street-address\"\r\n                                defaultValue={toAddress}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                id=\"extraAddress\"\r\n                                name=\"extraAddress\"\r\n                                label=\"Доп. адрес\"\r\n                                fullWidth\r\n                                autoComplete=\"street-address\"\r\n                                defaultValue={toExtraAddress}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <LocalizationProvider\r\n                                dateAdapter={AdapterDayjs}\r\n                                adapterLocale='ru'\r\n                            >\r\n                                <TimePicker\r\n                                    label=\"Время доставки с *\"\r\n                                    value={toPickUpTimeMin}\r\n                                    onChange={(newValue) => setToPickUpTimeMin(newValue)}\r\n                                    renderInput={(params) => <TextField fullWidth {...params} />}\r\n                                />\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <LocalizationProvider\r\n                                dateAdapter={AdapterDayjs}\r\n                                adapterLocale='ru'\r\n                            >\r\n                                <TimePicker\r\n                                    label=\"Время доставки до *\"\r\n                                    value={toPickUpTimeMax}\r\n                                    onChange={(newValue) => setToPickUpTimeMax(newValue)}\r\n                                    renderInput={(params) => <TextField fullWidth {...params} />}\r\n                                />\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                id=\"lastName\"\r\n                                name=\"lastName\"\r\n                                label=\"Фамилия\"\r\n                                fullWidth\r\n                                autoComplete=\"family-name\"\r\n                                defaultValue={toLastName}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                required\r\n                                id=\"firstName\"\r\n                                name=\"firstName\"\r\n                                label=\"Имя\"\r\n                                fullWidth\r\n                                autoComplete=\"given-name\"\r\n                                defaultValue={toFirstName}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                required\r\n                                id=\"phoneNumber\"\r\n                                name=\"phoneNumber\"\r\n                                label=\"Номер телефона\"\r\n                                fullWidth\r\n                                autoComplete=\"tel\"\r\n                                type=\"phone\"\r\n                                defaultValue={toPhone}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                id=\"extraPhoneNumber\"\r\n                                name=\"extraPhoneNumber\"\r\n                                label=\"Доп. номер телефона\"\r\n                                fullWidth\r\n                                autoComplete=\"tel\"\r\n                                type=\"phone\"\r\n                                defaultValue={toExtraPhone}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Проверить\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default To\r\n","import React, {FC} from 'react'\r\nimport {AppBar, Toolbar, Typography} from \"@mui/material\";\r\n\r\nconst Header: FC = () => {\r\n\r\n    return (\r\n        <AppBar\r\n            position=\"absolute\"\r\n            color=\"default\"\r\n            elevation={0}\r\n            sx={{\r\n                position: 'relative',\r\n                borderBottom: (t) => `1px solid ${t.palette.divider}`,\r\n            }}\r\n        >\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" color=\"inherit\" noWrap>\r\n                    закажи-доставку.рф\r\n                </Typography>\r\n            </Toolbar>\r\n        </AppBar>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, {FC, useCallback} from 'react'\r\nimport {Container, CssBaseline, Paper, Step, StepLabel, Stepper, Typography} from \"@mui/material\";\r\nimport Copyright from '../../components/copyright'\r\nimport {useSelector} from 'react-redux';\r\nimport {PickUpSelector} from \"../../store/selectors/selectors\";\r\nimport From from \"./steps/from\";\r\nimport Type from \"./steps/type\";\r\nimport Date from \"./steps/date\";\r\nimport FromInfo from \"./steps/from-info\";\r\nimport Nature from \"./steps/nature\";\r\nimport Pass from \"./steps/pass\";\r\nimport Call from \"./steps/call\";\r\nimport To from \"./steps/to\";\r\nimport Header from \"../../components/header\";\r\n\r\nconst PickUp: FC = () => {\r\n    const {step} = useSelector(PickUpSelector)\r\n\r\n    const getStepContent = useCallback(\r\n        (step: number) => {\r\n            switch (step) {\r\n                case 0:\r\n                    return <From/>\r\n                case 1:\r\n                    return <Type/>\r\n                case 2:\r\n                    return <Date/>\r\n                case 3:\r\n                    return <FromInfo/>\r\n                case 4:\r\n                    return <Nature/>\r\n                case 5:\r\n                    return <Pass/>\r\n                case 6:\r\n                    return <Call/>\r\n                case 7:\r\n                    return <To/>\r\n            }\r\n        }, [])\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline/>\r\n            <Header/>\r\n            <Container component=\"main\" maxWidth=\"sm\" sx={{mb: 4}}>\r\n                <Paper variant=\"outlined\" sx={{my: {xs: 3, md: 6}, p: {xs: 2, md: 3}}}>\r\n                    <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                        Забор груза\r\n                    </Typography>\r\n                    <Stepper activeStep={step} alternativeLabel sx={{pt: 3, pb: 5}}>\r\n                        {Array(8).fill('').map((el, i) => (\r\n                            <Step key={i}>\r\n                                <StepLabel/>\r\n                            </Step>\r\n                        ))}\r\n                    </Stepper>\r\n                    <>\r\n                        {getStepContent(step)}\r\n                    </>\r\n                </Paper>\r\n                <Copyright/>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PickUp\r\n","import React, {FC, useEffect, useState} from 'react'\r\nimport {Box, Button, CircularProgress, Container, CssBaseline, Grid, Paper, Typography} from \"@mui/material\";\r\nimport Header from \"../../../components/header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport Copyright from \"../../../components/copyright\";\r\nimport dayjs from \"dayjs\";\r\nimport axios from \"axios\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {clearState} from \"../../../store/slices/pick-up-slice\";\r\n\r\nconst PickUpCheck: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const [loading, setLoading] = useState(false)\r\n    const [isNext, setIsNext] = useState(false)\r\n    const data = useSelector(PickUpSelector)\r\n    const {\r\n        step,\r\n        from,\r\n        type,\r\n        pickUpDate,\r\n        orderNumber,\r\n        companyName,\r\n        fromLastName,\r\n        fromFirstName,\r\n        fromPhone,\r\n        fromExtraPhone,\r\n        fromAddress,\r\n        fromExtraAddress,\r\n        fromCompanyName,\r\n        fromPickUpTimeMin,\r\n        fromPickUpTimeMax,\r\n        fromDocuments,\r\n        nature,\r\n        natureDescription,\r\n        needPass,\r\n        call,\r\n        to,\r\n        toLastName,\r\n        toFirstName,\r\n        toPhone,\r\n        toExtraPhone,\r\n        toAddress,\r\n        toExtraAddress,\r\n        toCompanyName,\r\n        toPickUpTimeMin,\r\n        toPickUpTimeMax,\r\n        toDocuments,\r\n        supplierOrderNumber,\r\n        powerOfAttorney,\r\n        ready,\r\n        readyDate,\r\n        readyTime\r\n    }\r\n        = useSelector(PickUpSelector)\r\n\r\n    const navigate = useNavigate()\r\n    const [success, setSuccess] = useState(false)\r\n    const [error, setError] = useState(false)\r\n\r\n    const sendData = () => {\r\n        setLoading(true)\r\n        axios.post('https://закажи-доставку.рф/api-amocrm/pick-up', {\r\n            ...data,\r\n            readyDate: dayjs(readyDate).format('DD.MM.YYYY'),\r\n            readyTime: dayjs(readyTime).format('HH:mm'),\r\n            pickUpDate: dayjs(pickUpDate).format('DD.MM.YYYY'),\r\n            fromPickUpTimeMin: dayjs(fromPickUpTimeMin).format('HH:mm'),\r\n            fromPickUpTimeMax: dayjs(fromPickUpTimeMax).format('HH:mm'),\r\n            toPickUpTimeMin: dayjs(toPickUpTimeMin).format('HH:mm'),\r\n            toPickUpTimeMax: dayjs(toPickUpTimeMax).format('HH:mm'),\r\n        })\r\n            .then(() => {\r\n                setSuccess(true)\r\n                setIsNext(true)\r\n                dispatch(clearState())\r\n            })\r\n            .catch(() => setError(true))\r\n            .finally(() => setLoading(false))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (step < 7) {\r\n            navigate('pick-up')\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert isSuccess message={'Данные отправлены'} open={success} setOpen={setSuccess}/>\r\n            <CustomAlert message={'Ошибка отправки'} open={error} setOpen={setError}/>\r\n            <CssBaseline/>\r\n            <Header/>\r\n            <Container component=\"main\" maxWidth=\"md\" sx={{mb: 4}}>\r\n                <Paper variant=\"outlined\" sx={{my: {xs: 3, md: 6}, p: {xs: 2, md: 3}}}>\r\n                    <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                        Проверка данных\r\n                    </Typography>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Typography variant=\"h6\" align=\"center\">\r\n                                Откуда везем\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Забираем от: {from}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Вид услуги: {type}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Дата забора: {dayjs(pickUpDate).format('DD.MM.YYYY')}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Название организации: {fromCompanyName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Адрес: {fromAddress}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Доп. адрес: {fromExtraAddress}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Фамилия: {fromLastName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Имя: {fromFirstName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Номер телефона: {fromPhone}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Номер заказа или счета у поставщика/подрядчика: {supplierOrderNumber}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Доверенность: {powerOfAttorney}\r\n                            </Typography>\r\n                            {powerOfAttorney === 'Есть доверенность' &&\r\n                                <Typography variant=\"subtitle1\">\r\n                                    От какой организации доверенность: {companyName}\r\n                                </Typography>}\r\n                            <Typography variant=\"subtitle1\">\r\n                                Готовность заказа: {ready}\r\n                            </Typography>\r\n                            {ready === 'заказ не готов' &&\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Дата готовности\r\n                                    заказа: {dayjs(readyTime).format('HH:mm')} {dayjs(readyDate).format('DD.MM.YYYY')}\r\n                                </Typography>\r\n                            }\r\n                            <Typography variant=\"subtitle1\">\r\n                                Время забора с: {dayjs(fromPickUpTimeMin).format('HH:mm')}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Время забора до: {dayjs(fromPickUpTimeMax).format('HH:mm')}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Тип груза: {nature}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Описание груза: {natureDescription}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Нужен ли пропуск: {needPass}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Нужно ли созвониться заранее: {call}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Комментарий: {fromDocuments}\r\n                            </Typography>\r\n                        </Grid>\r\n                        {to === 'Другое' &&\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Typography variant=\"h6\" align=\"center\">\r\n                                    Другое\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Адрес доставки: {to}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Название организации: {toCompanyName}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Адрес: {toAddress}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Доп. адрес: {toExtraAddress}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Время доставки с: {dayjs(toPickUpTimeMin).format('HH:mm')}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Время доставки до: {dayjs(toPickUpTimeMax).format('HH:mm')}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Фамилия: {toLastName}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Имя: {toFirstName}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Номер телефона: {toPhone}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Доп. номер телефона: {toExtraPhone}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    Номер внутреннего заказа или счета: {orderNumber}\r\n                                </Typography>\r\n                            </Grid>\r\n                        }\r\n                    </Grid>\r\n                    <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                        <Button onClick={() => navigate('/pick-up')}>\r\n                            Назад\r\n                        </Button>\r\n                        {(!loading && !isNext) && <Button variant=\"contained\" onClick={sendData}>\r\n                            Подтвердить\r\n                        </Button>}\r\n                        {loading && <Button variant=\"outlined\">\r\n                            <CircularProgress size={20}/>\r\n                        </Button>}\r\n                        {isNext && <Button variant=\"contained\" onClick={() => navigate('/choose')}>\r\n                            На главную\r\n                        </Button>}\r\n                    </Box>\r\n                </Paper>\r\n                <Copyright/>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PickUpCheck\r\n","import React, {FC} from 'react'\r\nimport {Box, Button, Container, CssBaseline, Paper, Typography} from \"@mui/material\";\r\nimport Header from \"../../components/header\";\r\nimport Copyright from \"../../components/copyright\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst Choose: FC = () => {\r\n    const navigate = useNavigate()\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline/>\r\n            <Header/>\r\n            <Container component=\"main\" maxWidth=\"sm\" sx={{mb: 4}}>\r\n                <Paper variant=\"outlined\" sx={{my: {xs: 3, md: 6}, p: {xs: 2, md: 3}}}>\r\n                    <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                        Выберите тип заказа:\r\n                    </Typography>\r\n                    <Box sx={{display: 'flex', justifyContent: 'space-around', mt: 3}}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            onClick={() => navigate('/delivery')}\r\n                        >\r\n                            Доставка\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            size=\"large\"\r\n                            onClick={() => navigate('/pick-up')}\r\n                        >\r\n                            Забор\r\n                        </Button>\r\n                    </Box>\r\n                </Paper>\r\n                <Copyright/>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Choose\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {Dayjs} from \"dayjs\";\r\n\r\ninterface State {\r\n    step: number\r\n    to: string,\r\n    type: string,\r\n    ready: string\r\n    date: Dayjs | null\r\n    appNumber: string\r\n    readyDate: Dayjs | null\r\n    readyTime: Dayjs | null\r\n    fromLastName: string\r\n    fromFirstName: string\r\n    fromPhone: string\r\n    fromExtraPhone: string\r\n    fromAddress: string\r\n    fromExtraAddress: string\r\n    fromCompanyName: string\r\n    fromPickUpTimeMin: null | Dayjs\r\n    fromPickUpTimeMax: null | Dayjs\r\n    fromDocuments: string\r\n    nature: string\r\n    natureDescription: string\r\n    toLastName: string\r\n    toFirstName: string\r\n    toPhone: string\r\n    toExtraPhone: string\r\n    toAddress: string\r\n    toExtraAddress: string\r\n    toCompanyName: string\r\n    toPickUpTimeMin: null | Dayjs\r\n    toPickUpTimeMax: null | Dayjs\r\n    toDocuments: string\r\n    needPass: string\r\n    call: string\r\n}\r\n\r\nconst initialState: State = {\r\n    step: 0,\r\n    to: '',\r\n    type: '',\r\n    ready: '',\r\n    date: null,\r\n    appNumber: '',\r\n    readyDate: null,\r\n    readyTime: null,\r\n    fromLastName: '',\r\n    fromFirstName: '',\r\n    fromPhone: '',\r\n    fromExtraPhone: '',\r\n    fromAddress: '',\r\n    fromExtraAddress: '',\r\n    fromCompanyName: '',\r\n    fromPickUpTimeMin: null,\r\n    fromPickUpTimeMax: null,\r\n    fromDocuments: '',\r\n    nature: '',\r\n    natureDescription: '',\r\n    toLastName: '',\r\n    toFirstName: '',\r\n    toPhone: '',\r\n    toExtraPhone: '',\r\n    toAddress: '',\r\n    toExtraAddress: '',\r\n    toCompanyName: '',\r\n    toPickUpTimeMin: null,\r\n    toPickUpTimeMax: null,\r\n    toDocuments: '',\r\n    needPass: '',\r\n    call: '',\r\n}\r\n\r\nconst PickUpSlice = createSlice({\r\n    name: 'delivery',\r\n    initialState,\r\n    reducers: {\r\n        decrementStep(state) {\r\n            --state.step\r\n        },\r\n        clearState: () => initialState,\r\n        setToData(state, action: PayloadAction<string>) {\r\n            ++state.step\r\n            state.to = action.payload\r\n        },\r\n        setTypeData(state, action: PayloadAction<string>) {\r\n            ++state.step\r\n            state.type = action.payload\r\n        },\r\n        setDateData(state, action: PayloadAction<{\r\n            ready: string,\r\n            date: Dayjs | null,\r\n            appNumber: string,\r\n            readyTime: Dayjs | null,\r\n            readyDate: Dayjs | null\r\n        }>) {\r\n            ++state.step\r\n            state.ready = action.payload.ready\r\n            state.date = action.payload.date\r\n            state.appNumber = action.payload.appNumber\r\n            state.readyTime = action.payload.readyTime\r\n            state.readyDate = action.payload.readyDate\r\n        },\r\n        setFromData(state, action: PayloadAction<{\r\n            fromLastName: string\r\n            fromFirstName: string\r\n            fromPhone: string\r\n            fromExtraPhone: string\r\n            fromAddress: string\r\n            fromExtraAddress: string\r\n            fromCompanyName: string\r\n            fromPickUpTimeMin: null | Dayjs\r\n            fromPickUpTimeMax: null | Dayjs\r\n            fromDocuments: string\r\n        }>) {\r\n            ++state.step\r\n            state.fromLastName = action.payload.fromLastName\r\n            state.fromFirstName = action.payload.fromFirstName\r\n            state.fromPhone = action.payload.fromPhone\r\n            state.fromExtraPhone = action.payload.fromExtraPhone\r\n            state.fromAddress = action.payload.fromAddress\r\n            state.fromExtraAddress = action.payload.fromExtraAddress\r\n            state.fromCompanyName = action.payload.fromCompanyName\r\n            state.fromPickUpTimeMin = action.payload.fromPickUpTimeMin\r\n            state.fromPickUpTimeMax = action.payload.fromPickUpTimeMax\r\n            state.fromDocuments = action.payload.fromDocuments\r\n        },\r\n        setNatureData(state, action: PayloadAction<{\r\n            nature: string\r\n            natureDescription: string\r\n        }>) {\r\n            ++state.step\r\n            state.nature = action.payload.nature\r\n            state.natureDescription = action.payload.natureDescription\r\n        },\r\n        setAddressData(state, action: PayloadAction<{\r\n            toLastName: string\r\n            toFirstName: string\r\n            toPhone: string\r\n            toExtraPhone: string\r\n            toAddress: string\r\n            toExtraAddress: string\r\n            toCompanyName: string\r\n            toPickUpTimeMin: null | Dayjs\r\n            toPickUpTimeMax: null | Dayjs\r\n            toDocuments: string\r\n        }>) {\r\n            ++state.step\r\n            state.toLastName = action.payload.toLastName\r\n            state.toFirstName = action.payload.toFirstName\r\n            state.toPhone = action.payload.toPhone\r\n            state.toExtraPhone = action.payload.toExtraPhone\r\n            state.toAddress = action.payload.toAddress\r\n            state.toExtraAddress = action.payload.toExtraAddress\r\n            state.toCompanyName = action.payload.toCompanyName\r\n            state.toPickUpTimeMin = action.payload.toPickUpTimeMin\r\n            state.toPickUpTimeMax = action.payload.toPickUpTimeMax\r\n            state.toDocuments = action.payload.toDocuments\r\n        },\r\n        setPassData(state, action: PayloadAction<{ needPass: string }>) {\r\n            ++state.step\r\n            state.needPass = action.payload.needPass\r\n        },\r\n        setCallData(state, action: PayloadAction<{ call: string }>) {\r\n            state.call = action.payload.call\r\n        },\r\n    }\r\n})\r\n\r\nexport const {\r\n    clearState,\r\n    decrementStep,\r\n    setToData,\r\n    setTypeData,\r\n    setDateData,\r\n    setFromData,\r\n    setNatureData,\r\n    setAddressData,\r\n    setPassData,\r\n    setCallData\r\n} = PickUpSlice.actions\r\nexport default PickUpSlice.reducer\r\n","import {Box, Button, RadioGroup, Typography, Radio, FormControlLabel} from '@mui/material'\r\nimport React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {DeliverySelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {setToData} from \"../../../store/slices/delivery-slice\";\r\n\r\nconst From: FC = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const {to} = useSelector(DeliverySelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n    const navigate = useNavigate()\r\n\r\n    const handleBack = () => {\r\n        navigate('/choose')\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const to = data.get('to') as string\r\n\r\n        if (to) {\r\n            dispatch(setToData(to))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Кому везем:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-from\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={to}\r\n                >\r\n                    <FormControlLabel name='to' value=\"клиент\" control={<Radio/>} label=\"Клиенту\"/>\r\n                    <FormControlLabel name='to' value=\"подрядчик\" control={<Radio/>} label=\"Подрядчику\"/>\r\n                </RadioGroup>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button type=\"submit\" variant=\"contained\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default From\r\n","import {Box, Button, RadioGroup, Typography, Radio, FormControlLabel} from '@mui/material'\r\nimport React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {DeliverySelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {decrementStep, setTypeData} from \"../../../store/slices/delivery-slice\";\r\n\r\nconst Type: FC = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const {type} = useSelector(DeliverySelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const type = data.get('type') as string\r\n\r\n        if (type) {\r\n            dispatch(setTypeData(type))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите тип услуги:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-from\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={type}\r\n                >\r\n                    <FormControlLabel name='type' value=\"авто\" control={<Radio/>} label=\"Авто\"/>\r\n                    <FormControlLabel name='type' value=\"пеший\" control={<Radio/>} label=\"Пеший\"/>\r\n                </RadioGroup>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button type=\"submit\" variant=\"contained\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Type\r\n","import {Box, Button, RadioGroup, Typography, Radio, FormControlLabel, Grid, TextField} from '@mui/material'\r\nimport React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {DeliverySelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {decrementStep, setDateData} from \"../../../store/slices/delivery-slice\";\r\nimport {AdapterDayjs} from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport {DatePicker} from \"@mui/x-date-pickers/DatePicker\";\r\nimport {LocalizationProvider} from \"@mui/x-date-pickers/LocalizationProvider\";\r\nimport dayjs, {Dayjs} from \"dayjs\";\r\nimport {TimePicker} from \"@mui/x-date-pickers\";\r\n\r\nconst DateComponent: FC = () => {\r\n    const [open, setOpen] = useState(false)\r\n    const {\r\n        ready: readyStore,\r\n        date: dateStore,\r\n        appNumber,\r\n        readyDate: readyDateStore,\r\n        readyTime: readyTimeStore\r\n    } = useSelector(DeliverySelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [date, setDate] = useState<Dayjs | null>(dateStore)\r\n    const [ready, setReady] = useState(readyStore)\r\n\r\n    const [openPicker, setOpenPicker] = useState(false)\r\n    const [openReadyPicker, setOpenReadyPicker] = useState(false)\r\n\r\n    const [readyDate, setReadyDate] = useState<Dayjs | null>(readyDateStore)\r\n    const [readyTime, setReadyTime] = useState<Dayjs | null>(readyTimeStore)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const ready = data.get('ready') as string\r\n        const appNumber = data.get('appNumber') as string\r\n\r\n        if (ready && appNumber && date &&\r\n            ((ready === 'заказ не готов' && readyDate && readyTime) || ready === 'заказ готов')\r\n        ) {\r\n            dispatch(setDateData({ready, appNumber, date, readyDate, readyTime}))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите следующие данные:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            name=\"appNumber\"\r\n                            label=\"Номер заказа\"\r\n                            fullWidth\r\n                            autoComplete=\"order-number\"\r\n                            defaultValue={appNumber}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <LocalizationProvider\r\n                            dateAdapter={AdapterDayjs}\r\n                            adapterLocale='ru'\r\n                        >\r\n                            <DatePicker\r\n                                open={openPicker}\r\n                                onOpen={() => setOpenPicker(true)}\r\n                                onClose={() => setOpenPicker(false)}\r\n                                minDate={dayjs().add(1, 'day')}\r\n                                label=\"Дата забора *\"\r\n                                value={date}\r\n                                onChange={e => setDate(e)}\r\n                                renderInput={(params) =>\r\n                                    <TextField\r\n                                        focused={false}\r\n                                        onClick={() => setOpenPicker(true)}\r\n                                        onKeyDown={e => e.preventDefault()}\r\n                                        fullWidth\r\n                                        {...params}\r\n                                    />}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                </Grid>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-from\"\r\n                    name=\"radio-buttons-group\"\r\n                    value={ready}\r\n                    onChange={e => setReady(e.target.value)}\r\n                >\r\n                    <FormControlLabel name='ready' value=\"заказ готов\" control={<Radio/>} label=\"Заказ готов\"/>\r\n                    <FormControlLabel name='ready' value=\"заказ не готов\" control={<Radio/>} label=\"Заказ не готов\"/>\r\n                </RadioGroup>\r\n                {\r\n                    ready === \"заказ не готов\" &&\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <LocalizationProvider\r\n                                dateAdapter={AdapterDayjs}\r\n                                adapterLocale='ru'\r\n                            >\r\n                                <DatePicker\r\n                                    open={openReadyPicker}\r\n                                    onOpen={() => setOpenReadyPicker(true)}\r\n                                    onClose={() => setOpenReadyPicker(false)}\r\n                                    minDate={dayjs()}\r\n                                    label=\"Дата готовности *\"\r\n                                    value={readyDate}\r\n                                    onChange={e => setReadyDate(e)}\r\n                                    renderInput={(params) =>\r\n                                        <TextField\r\n                                            focused={false}\r\n                                            onClick={() => setOpenReadyPicker(true)}\r\n                                            onKeyDown={e => e.preventDefault()}\r\n                                            fullWidth\r\n                                            {...params}\r\n                                        />}\r\n                                />\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <LocalizationProvider\r\n                                dateAdapter={AdapterDayjs}\r\n                                adapterLocale='ru'\r\n                            >\r\n                                <TimePicker\r\n                                    label=\"Время готовности *\"\r\n                                    value={readyTime}\r\n                                    onChange={(newValue) => setReadyTime(newValue)}\r\n                                    renderInput={(params) => <TextField onKeyDown={e => e.preventDefault()}\r\n                                                                        fullWidth {...params} />}\r\n                                />\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button type=\"submit\" variant=\"contained\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DateComponent\r\n","import React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {DeliverySelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {Dayjs} from \"dayjs\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {Box, Button, Grid, TextField, Typography} from \"@mui/material\";\r\nimport {LocalizationProvider, TimePicker} from \"@mui/x-date-pickers\";\r\nimport {AdapterDayjs} from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport {setFromData, decrementStep} from \"../../../store/slices/delivery-slice\";\r\n\r\nconst From: FC = () => {\r\n    const {\r\n        fromLastName,\r\n        fromFirstName,\r\n        fromPhone,\r\n        fromExtraPhone,\r\n        fromAddress,\r\n        fromExtraAddress,\r\n        fromCompanyName,\r\n        fromPickUpTimeMin: fromPickUpTimeMinStore,\r\n        fromPickUpTimeMax: fromPickUpTimeMaxStore,\r\n        fromDocuments,\r\n    } = useSelector(DeliverySelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [fromPickUpTimeMin, setFromPickUpTimeMin] = React.useState<Dayjs | null>(fromPickUpTimeMinStore);\r\n    const [fromPickUpTimeMax, setFromPickUpTimeMax] = React.useState<Dayjs | null>(fromPickUpTimeMaxStore);\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const lastName = data.get('lastName') as string\r\n        const firstName = data.get('firstName') as string\r\n        const phoneNumber = data.get('phoneNumber') as string\r\n        const extraPhoneNumber = data.get('extraPhoneNumber') as string\r\n        const address = data.get('address') as string\r\n        const extraAddress = data.get('extraAddress') as string\r\n        const documents = data.get('documents') as string\r\n        const company = data.get('company') as string\r\n\r\n        if (lastName && firstName && phoneNumber && address && company && fromPickUpTimeMin && fromPickUpTimeMax) {\r\n            dispatch(setFromData({\r\n                fromLastName: lastName,\r\n                fromFirstName: firstName,\r\n                fromPhone: phoneNumber,\r\n                fromExtraPhone: extraPhoneNumber,\r\n                fromAddress: address,\r\n                fromExtraAddress: extraAddress,\r\n                fromCompanyName: company,\r\n                fromPickUpTimeMin,\r\n                fromPickUpTimeMax,\r\n                fromDocuments: documents\r\n            }))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите данные от кого забирать:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"company\"\r\n                            name=\"company\"\r\n                            label=\"Название организации\"\r\n                            fullWidth\r\n                            autoComplete=\"organization\"\r\n                            defaultValue={fromCompanyName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"address\"\r\n                            name=\"address\"\r\n                            label=\"Адрес\"\r\n                            fullWidth\r\n                            autoComplete=\"street-address\"\r\n                            defaultValue={fromAddress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"extraAddress\"\r\n                            name=\"extraAddress\"\r\n                            label=\"Доп. адрес\"\r\n                            fullWidth\r\n                            autoComplete=\"street-address\"\r\n                            defaultValue={fromExtraAddress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <LocalizationProvider\r\n                            dateAdapter={AdapterDayjs}\r\n                            adapterLocale='ru'\r\n                        >\r\n                            <TimePicker\r\n                                label=\"Время забора с *\"\r\n                                value={fromPickUpTimeMin}\r\n                                onChange={(newValue) => setFromPickUpTimeMin(newValue)}\r\n                                renderInput={(params) => <TextField fullWidth {...params} />}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <LocalizationProvider\r\n                            dateAdapter={AdapterDayjs}\r\n                            adapterLocale='ru'\r\n                        >\r\n                            <TimePicker\r\n                                label=\"Время забора до *\"\r\n                                value={fromPickUpTimeMax}\r\n                                onChange={(newValue) => setFromPickUpTimeMax(newValue)}\r\n                                renderInput={(params) => <TextField fullWidth {...params} />}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            label=\"Фамилия\"\r\n                            fullWidth\r\n                            autoComplete=\"family-name\"\r\n                            defaultValue={fromLastName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            label=\"Имя\"\r\n                            fullWidth\r\n                            autoComplete=\"given-name\"\r\n                            defaultValue={fromFirstName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"phoneNumber\"\r\n                            name=\"phoneNumber\"\r\n                            label=\"Номер телефона\"\r\n                            fullWidth\r\n                            autoComplete=\"tel\"\r\n                            type=\"phone\"\r\n                            defaultValue={fromPhone}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"extraPhoneNumber\"\r\n                            name=\"extraPhoneNumber\"\r\n                            label=\"Доп. номер телефона\"\r\n                            fullWidth\r\n                            autoComplete=\"tel\"\r\n                            type=\"phone\"\r\n                            defaultValue={fromExtraPhone}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"documents\"\r\n                            name=\"documents\"\r\n                            label=\"Комментарий\"\r\n                            fullWidth\r\n                            autoComplete=\"documents\"\r\n                            defaultValue={fromDocuments}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default From\r\n","import React, {FC, useState} from 'react'\r\nimport {\r\n    Box,\r\n    Button,\r\n    FormControlLabel,\r\n    Radio,\r\n    RadioGroup,\r\n    TextField,\r\n    Typography\r\n} from \"@mui/material\";\r\nimport {decrementStep, setNatureData} from \"../../../store/slices/delivery-slice\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {DeliverySelector} from \"../../../store/selectors/selectors\";\r\nimport CustomAlert from \"../../../components/alert\";\r\n\r\nconst Nature: FC = () => {\r\n    const {nature, natureDescription} = useSelector(DeliverySelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const nature = data.get('nature') as string\r\n        const description = data.get('description') as string\r\n\r\n        if (nature && description) {\r\n            dispatch(setNatureData({nature, natureDescription: description}))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите тип груза:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-nature\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={nature}\r\n                >\r\n                    <FormControlLabel name=\"nature\" value=\"коробка\" control={<Radio/>} label=\"Коробка\"/>\r\n                    <FormControlLabel name=\"nature\" value=\"пачка\" control={<Radio/>} label=\"Пачка\"/>\r\n                    <FormControlLabel name=\"nature\" value=\"другое\" control={<Radio/>} label=\"Другое\"/>\r\n                </RadioGroup>\r\n                <TextField\r\n                    defaultValue={natureDescription}\r\n                    name=\"description\"\r\n                    required\r\n                    id=\"outlined-multiline-flexible\"\r\n                    label=\"Описание\"\r\n                    multiline\r\n                    maxRows={4}\r\n                    placeholder=\"ВАЖНО: После выбора Коробка и Пачка, необходимо написать количество и вес. При выборе ДРУГОЕ опишите характер груза (например: Баннер длинной 2,30м; Паллет 400кг и т.д.)\"\r\n                    fullWidth\r\n                />\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Nature\r\n","import React, {useState} from 'react'\r\nimport {Box, Button, FormControlLabel, Radio, RadioGroup, Typography} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {decrementStep, setPassData} from \"../../../store/slices/delivery-slice\";\r\nimport {DeliverySelector, PickUpSelector} from \"../../../store/selectors/selectors\";\r\nimport CustomAlert from \"../../../components/alert\";\r\n\r\nconst Pass = () => {\r\n    const {needPass} = useSelector(DeliverySelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const pass = data.get('pass') as string\r\n\r\n        if (pass) {\r\n            dispatch(setPassData({needPass: pass}))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Нужен ли пропуск:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-pass\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={needPass}\r\n                >\r\n                    <FormControlLabel name=\"pass\" value=\"нужен\" control={<Radio/>} label=\"Пропуск нужен\"/>\r\n                    <FormControlLabel name=\"pass\" value=\"не нужен\" control={<Radio/>} label=\"Пропуск не нужен\"/>\r\n                </RadioGroup>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Pass\r\n","import React, {FC, useState} from 'react'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {DeliverySelector} from \"../../../store/selectors/selectors\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {Dayjs} from \"dayjs\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {Box, Button, Grid, TextField, Typography} from \"@mui/material\";\r\nimport {LocalizationProvider, TimePicker} from \"@mui/x-date-pickers\";\r\nimport {AdapterDayjs} from \"@mui/x-date-pickers/AdapterDayjs\";\r\nimport {decrementStep, setAddressData} from \"../../../store/slices/delivery-slice\";\r\n\r\nconst Address: FC = () => {\r\n    const {\r\n        toLastName,\r\n        toFirstName,\r\n        toPhone,\r\n        toExtraPhone,\r\n        toAddress,\r\n        toExtraAddress,\r\n        toCompanyName,\r\n        toPickUpTimeMin: toPickUpTimeMinStore,\r\n        toPickUpTimeMax: toPickUpTimeMaxStore,\r\n        toDocuments,\r\n    } = useSelector(DeliverySelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n\r\n    const [toPickUpTimeMin, setFromPickUpTimeMin] = React.useState<Dayjs | null>(toPickUpTimeMinStore);\r\n    const [toPickUpTimeMax, setFromPickUpTimeMax] = React.useState<Dayjs | null>(toPickUpTimeMaxStore);\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const lastName = data.get('lastName') as string\r\n        const firstName = data.get('firstName') as string\r\n        const phoneNumber = data.get('phoneNumber') as string\r\n        const extraPhoneNumber = data.get('extraPhoneNumber') as string\r\n        const address = data.get('address') as string\r\n        const extraAddress = data.get('extraAddress') as string\r\n        const documents = data.get('documents') as string\r\n        const company = data.get('company') as string\r\n\r\n        if (lastName && firstName && phoneNumber && address && company && toPickUpTimeMin && toPickUpTimeMax) {\r\n            dispatch(setAddressData({\r\n                toLastName: lastName,\r\n                toFirstName: firstName,\r\n                toPhone: phoneNumber,\r\n                toExtraPhone: extraPhoneNumber,\r\n                toAddress: address,\r\n                toExtraAddress: extraAddress,\r\n                toCompanyName: company,\r\n                toPickUpTimeMin,\r\n                toPickUpTimeMax,\r\n                toDocuments: documents\r\n            }))\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Укажите данные кому везем:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"company\"\r\n                            name=\"company\"\r\n                            label=\"Название организации\"\r\n                            fullWidth\r\n                            autoComplete=\"organization\"\r\n                            defaultValue={toCompanyName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"address\"\r\n                            name=\"address\"\r\n                            label=\"Адрес\"\r\n                            fullWidth\r\n                            autoComplete=\"street-address\"\r\n                            defaultValue={toAddress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"extraAddress\"\r\n                            name=\"extraAddress\"\r\n                            label=\"Доп. адрес\"\r\n                            fullWidth\r\n                            autoComplete=\"street-address\"\r\n                            defaultValue={toExtraAddress}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <LocalizationProvider\r\n                            dateAdapter={AdapterDayjs}\r\n                            adapterLocale='ru'\r\n                        >\r\n                            <TimePicker\r\n                                label=\"Время доставки с *\"\r\n                                value={toPickUpTimeMin}\r\n                                onChange={(newValue) => setFromPickUpTimeMin(newValue)}\r\n                                renderInput={(params) => <TextField fullWidth {...params} />}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <LocalizationProvider\r\n                            dateAdapter={AdapterDayjs}\r\n                            adapterLocale='ru'\r\n                        >\r\n                            <TimePicker\r\n                                label=\"Время доставки до *\"\r\n                                value={toPickUpTimeMax}\r\n                                onChange={(newValue) => setFromPickUpTimeMax(newValue)}\r\n                                renderInput={(params) => <TextField fullWidth {...params} />}\r\n                            />\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            label=\"Фамилия\"\r\n                            fullWidth\r\n                            autoComplete=\"family-name\"\r\n                            defaultValue={toLastName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            label=\"Имя\"\r\n                            fullWidth\r\n                            autoComplete=\"given-name\"\r\n                            defaultValue={toFirstName}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            required\r\n                            id=\"phoneNumber\"\r\n                            name=\"phoneNumber\"\r\n                            label=\"Номер телефона\"\r\n                            fullWidth\r\n                            autoComplete=\"tel\"\r\n                            type=\"phone\"\r\n                            defaultValue={toPhone}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"extraPhoneNumber\"\r\n                            name=\"extraPhoneNumber\"\r\n                            label=\"Доп. номер телефона\"\r\n                            fullWidth\r\n                            autoComplete=\"tel\"\r\n                            type=\"phone\"\r\n                            defaultValue={toExtraPhone}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            id=\"documents\"\r\n                            name=\"documents\"\r\n                            label=\"Комментарий к доставке\"\r\n                            fullWidth\r\n                            autoComplete=\"documents\"\r\n                            defaultValue={toDocuments}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Address\r\n","import React, {FC, useState} from 'react'\r\nimport {Box, Button, FormControlLabel, Radio, RadioGroup, Typography} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch} from \"../../../store/store\";\r\nimport {decrementStep, setCallData} from \"../../../store/slices/delivery-slice\";\r\nimport {DeliverySelector} from \"../../../store/selectors/selectors\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {useNavigate} from \"react-router-dom\";\r\n\r\nconst Call: FC = () => {\r\n    const {call} = useSelector(DeliverySelector)\r\n    const dispatch = useDispatch<AppDispatch>()\r\n    const navigation = useNavigate()\r\n\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const handleBack = () => {\r\n        dispatch(decrementStep())\r\n    }\r\n\r\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\r\n        event.preventDefault();\r\n        const data = new FormData(event.currentTarget);\r\n        const call = data.get('call') as string\r\n\r\n        if (call) {\r\n            dispatch(setCallData({call}))\r\n            navigation('/delivery-check')\r\n        } else {\r\n            setOpen(true)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert open={open} setOpen={setOpen}/>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n                Нужно ли созвониться заранее:\r\n            </Typography>\r\n            <Box component=\"form\" onSubmit={handleSubmit}>\r\n                <RadioGroup\r\n                    aria-labelledby=\"pick-up-call\"\r\n                    name=\"radio-buttons-group\"\r\n                    defaultValue={call}\r\n                >\r\n                    <FormControlLabel name=\"call\" value=\"15 минут\" control={<Radio/>} label=\"Созвониться за 15 минут\"/>\r\n                    <FormControlLabel name=\"call\" value=\"30 минут\" control={<Radio/>} label=\"Созвониться за 30 минут\"/>\r\n                    <FormControlLabel name=\"call\" value=\"1 час\" control={<Radio/>} label=\"Созвониться за час\"/>\r\n                    <FormControlLabel name=\"call\" value=\"3 часа\" control={<Radio/>} label=\"Созвониться за 3 часа\"/>\r\n                    <FormControlLabel name=\"call\" value=\"не нужно\" control={<Radio/>} label=\"Созвониваться не нужно\"/>\r\n                </RadioGroup>\r\n                <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                    <Button onClick={handleBack}>\r\n                        Назад\r\n                    </Button>\r\n                    <Button variant=\"contained\" type=\"submit\">\r\n                        Далее\r\n                    </Button>\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Call\r\n","import React, {FC, useCallback} from 'react'\r\nimport {Container, CssBaseline, Paper, Step, StepLabel, Stepper, Typography} from \"@mui/material\";\r\nimport Copyright from '../../components/copyright'\r\nimport {useSelector} from 'react-redux';\r\nimport {DeliverySelector} from \"../../store/selectors/selectors\";\r\nimport To from \"./steps/to\";\r\nimport Header from \"../../components/header\";\r\nimport Type from \"./steps/type\";\r\nimport Date from \"./steps/date\";\r\nimport From from \"./steps/from\";\r\nimport Nature from \"./steps/nature\";\r\nimport Pass from \"./steps/pass\";\r\nimport Address from \"./steps/address\";\r\nimport Call from \"./steps/call\";\r\n\r\nconst Delivery: FC = () => {\r\n    const {step} = useSelector(DeliverySelector)\r\n\r\n    const getStepContent = useCallback(\r\n        (step: number) => {\r\n            switch (step) {\r\n                case 0:\r\n                    return <To/>\r\n                case 1:\r\n                    return <Type/>\r\n                case 2:\r\n                    return <Date/>\r\n                case 3:\r\n                    return <From/>\r\n                case 4:\r\n                    return <Nature/>\r\n                case 5:\r\n                    return <Address/>\r\n                case 6:\r\n                    return <Pass/>\r\n                case 7:\r\n                    return <Call/>\r\n            }\r\n        }, [])\r\n\r\n    return (\r\n        <>\r\n            <CssBaseline/>\r\n            <Header/>\r\n            <Container component=\"main\" maxWidth=\"sm\" sx={{mb: 4}}>\r\n                <Paper variant=\"outlined\" sx={{my: {xs: 3, md: 6}, p: {xs: 2, md: 3}}}>\r\n                    <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                        Доставка груза\r\n                    </Typography>\r\n                    <Stepper activeStep={step} alternativeLabel sx={{pt: 3, pb: 5}}>\r\n                        {Array(8).fill('').map((el, i) => (\r\n                            <Step key={i}>\r\n                                <StepLabel/>\r\n                            </Step>\r\n                        ))}\r\n                    </Stepper>\r\n                    <>\r\n                        {getStepContent(step)}\r\n                    </>\r\n                </Paper>\r\n                <Copyright/>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Delivery\r\n","import React, {FC, useEffect, useState} from 'react'\r\nimport {Box, Button, CircularProgress, Container, CssBaseline, Grid, Paper, Typography} from \"@mui/material\";\r\nimport Header from \"../../../components/header\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {DeliverySelector} from \"../../../store/selectors/selectors\";\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport Copyright from \"../../../components/copyright\";\r\nimport dayjs from \"dayjs\";\r\nimport axios from \"axios\";\r\nimport CustomAlert from \"../../../components/alert\";\r\nimport {clearState} from \"../../../store/slices/delivery-slice\";\r\n\r\nconst DeliveryCheck: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const [loading, setLoading] = useState(false)\r\n    const [isNext, setIsNext] = useState(false)\r\n    const data = useSelector(DeliverySelector)\r\n    const {\r\n        step,\r\n        to,\r\n        type,\r\n        ready,\r\n        date,\r\n        appNumber,\r\n        fromLastName,\r\n        fromFirstName,\r\n        fromPhone,\r\n        fromExtraPhone,\r\n        fromAddress,\r\n        fromExtraAddress,\r\n        fromCompanyName,\r\n        fromPickUpTimeMin,\r\n        fromPickUpTimeMax,\r\n        fromDocuments,\r\n        nature,\r\n        natureDescription,\r\n        toLastName,\r\n        toFirstName,\r\n        toPhone,\r\n        toExtraPhone,\r\n        toAddress,\r\n        toExtraAddress,\r\n        toCompanyName,\r\n        toPickUpTimeMin,\r\n        toPickUpTimeMax,\r\n        toDocuments,\r\n        needPass,\r\n        call,\r\n        readyDate,\r\n        readyTime,\r\n    }\r\n        = useSelector(DeliverySelector)\r\n    const [success, setSuccess] = useState(false)\r\n    const [error, setError] = useState(false)\r\n\r\n    const sendData = () => {\r\n        setLoading(true)\r\n        axios.post('https://закажи-доставку.рф/api-amocrm/delivery', {\r\n            ...data,\r\n            date: dayjs(date).format('DD.MM.YYYY'),\r\n            readyDate: dayjs(readyDate).format('DD.MM.YYYY'),\r\n            readyTime: dayjs(readyTime).format('HH:mm'),\r\n            fromPickUpTimeMin: dayjs(fromPickUpTimeMin).format('HH:mm'),\r\n            fromPickUpTimeMax: dayjs(fromPickUpTimeMax).format('HH:mm'),\r\n            toPickUpTimeMin: dayjs(toPickUpTimeMin).format('HH:mm'),\r\n            toPickUpTimeMax: dayjs(toPickUpTimeMax).format('HH:mm'),\r\n        })\r\n            .then(() => {\r\n                setSuccess(true)\r\n                setIsNext(true)\r\n                dispatch(clearState())\r\n            })\r\n            .catch(() => setError(true))\r\n            .finally(() => setLoading(false))\r\n    }\r\n\r\n    const navigate = useNavigate()\r\n\r\n    useEffect(() => {\r\n        if (step < 7) {\r\n            navigate('delivery')\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            <CustomAlert isSuccess message={'Данные отправлены'} open={success} setOpen={setSuccess}/>\r\n            <CustomAlert message={'Ошибка отправки'} open={error} setOpen={setError}/>\r\n            <CssBaseline/>\r\n            <Header/>\r\n            <Container component=\"main\" maxWidth=\"md\" sx={{mb: 4}}>\r\n                <Paper variant=\"outlined\" sx={{my: {xs: 3, md: 6}, p: {xs: 2, md: 3}}}>\r\n                    <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n                        Проверка данных\r\n                    </Typography>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Typography variant=\"h6\" align=\"center\">\r\n                                От кого везем\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Тип услуги: {type}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Дата забора: {dayjs(date).format('DD.MM.YYYY')}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Название организации: {fromCompanyName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Адрес: {fromAddress}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Доп. адрес: {fromExtraAddress}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Фамилия: {fromLastName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Имя: {fromFirstName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Номер телефона: {fromPhone}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Доп. номер телефона: {fromExtraPhone}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Номер заказа: {appNumber}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Готовность заказа: {ready}\r\n                            </Typography>\r\n                            {ready === 'заказ не готов' && <Typography variant=\"subtitle1\">\r\n                                Дата готовности заказа: {dayjs(readyTime).format('HH:mm')} {dayjs(readyDate).format('DD.MM.YYYY')}\r\n                            </Typography>}\r\n                            <Typography variant=\"subtitle1\">\r\n                                Время забора с: {dayjs(fromPickUpTimeMin).format('HH:mm')}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Время забора до: {dayjs(fromPickUpTimeMax).format('HH:mm')}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Укажите тип груза: {nature}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Описание груза: {natureDescription}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Комментарий: {fromDocuments}\r\n                            </Typography>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <Typography variant=\"h6\" align=\"center\">\r\n                                Кому везем\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Кому везем: {to}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Название организации: {toCompanyName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Адрес: {toAddress}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Доп. адрес: {toExtraAddress}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Время доставки с: {dayjs(toPickUpTimeMin).format('HH:mm')}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Время доставки до: {dayjs(toPickUpTimeMax).format('HH:mm')}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Фамилия: {toLastName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Имя: {toFirstName}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Номер телефона: {toPhone}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Доп. номер телефона: {toExtraPhone}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Комментарий: {toDocuments}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Нужен ли пропуск: {needPass}\r\n                            </Typography>\r\n                            <Typography variant=\"subtitle1\">\r\n                                Нужно ли созвониться заранее: {call}\r\n                            </Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Box sx={{display: 'flex', justifyContent: 'space-between', mt: 3}}>\r\n                        <Button onClick={() => navigate('/delivery')}>\r\n                            Назад\r\n                        </Button>\r\n                        {(!loading && !isNext) && <Button variant=\"contained\" onClick={sendData}>\r\n                            Подтвердить\r\n                        </Button>}\r\n                        {loading && <Button variant=\"outlined\">\r\n                            <CircularProgress size={20}/>\r\n                        </Button>}\r\n                        {isNext && <Button variant=\"contained\" onClick={() => navigate('/choose')}>\r\n                            На главную\r\n                        </Button>}\r\n                    </Box>\r\n                </Paper>\r\n                <Copyright/>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DeliveryCheck\r\n","import React, {FC, useEffect} from 'react'\r\nimport {BrowserRouter, Routes, Route, Navigate} from \"react-router-dom\";\r\nimport SignIn from \"./pages/sign-in/sign-in\";\r\nimport SignUp from \"./pages/sign-up/sign-up\";\r\nimport PickUp from \"./pages/pick-up/pick-up\";\r\nimport PickUpCheck from \"./pages/pick-up/check/pick-up-check\";\r\nimport Choose from \"./pages/choose/choose\";\r\nimport Delivery from \"./pages/delivery/delivery\";\r\nimport DeliveryCheck from \"./pages/delivery/check/delivery-check\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AuthSelector} from \"./store/selectors/selectors\";\r\nimport {refreshThunk} from \"./store/thunks/auth-thunk\";\r\nimport {setLoading} from \"./store/slices/auth-slice\";\r\nimport {CircularProgress} from \"@mui/material\";\r\n\r\nconst AppRouter: FC = () => {\r\n    const dispatch = useDispatch()\r\n    const {isAuth, isLoading} = useSelector(AuthSelector)\r\n\r\n    useEffect(() => {\r\n        const jwt = localStorage.getItem('jwt')\r\n\r\n        if (jwt) {\r\n            // @ts-ignore\r\n            dispatch(refreshThunk({jwt}))\r\n        } else {\r\n            dispatch(setLoading(false))\r\n        }\r\n    }, [])\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <div style={{\r\n                height: '100vh',\r\n                width: '100vw',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                justifyContent: 'center'\r\n            }}>\r\n                <CircularProgress/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Routes>\r\n                {\r\n                    !isAuth ?\r\n                        <>\r\n                            <Route path='/sign-in' element={<SignIn/>}/>\r\n                            <Route path='/sign-up' element={<SignUp/>}/>\r\n                            <Route path='*' element={<Navigate to=\"/sign-in\" replace/>}/>\r\n                        </>\r\n                        :\r\n                        <>\r\n                            <Route path='/choose' element={<Choose/>}/>\r\n                            <Route path='/pick-up' element={<PickUp/>}/>\r\n                            <Route path='/pick-up-check' element={<PickUpCheck/>}/>\r\n                            <Route path='/delivery' element={<Delivery/>}/>\r\n                            <Route path='/delivery-check' element={<DeliveryCheck/>}/>\r\n                            <Route path='*' element={<Navigate to=\"/choose\" replace/>}/>\r\n                        </>\r\n                }\r\n            </Routes>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import {configureStore} from '@reduxjs/toolkit'\r\nimport PickUpSlice from './slices/pick-up-slice'\r\nimport DeliverySlice from \"./slices/delivery-slice\";\r\nimport AuthSlice from \"./slices/auth-slice\";\r\n\r\nexport const store = configureStore({\r\n    reducer: {\r\n        pickUp: PickUpSlice,\r\n        delivery: DeliverySlice,\r\n        auth: AuthSlice\r\n    },\r\n})\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch\r\n","import '@fontsource/roboto/300.css';\nimport '@fontsource/roboto/400.css';\nimport '@fontsource/roboto/500.css';\nimport '@fontsource/roboto/700.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport AppRouter from \"./app-router\";\nimport {createTheme, ThemeProvider} from \"@mui/material\";\nimport {Provider} from 'react-redux'\nimport {store} from \"./store/store\";\n\nconst theme = createTheme();\n\nconst root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement\n);\nroot.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <ThemeProvider theme={theme}>\n                <AppRouter/>\n            </ThemeProvider>\n        </Provider>\n    </React.StrictMode>\n);\n\n"],"sourceRoot":""}